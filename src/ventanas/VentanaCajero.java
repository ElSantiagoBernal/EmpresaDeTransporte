/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanas;

import ventanas.VentanaAdministrador;
import com.sun.org.apache.bcel.internal.generic.AALOAD;
import excepciones.AsientoVehiculoCompletoException;
import excepciones.CampoIdVacioException;
import excepciones.ObjetoTablaNoSeleccionadoException;
import excepciones.UsuarioNoRegistradoException;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelos.Pasajero;
import modelos.Ruta;
import modelos.Tiquete;
import modelos.Usuario;
import modelos.Vehiculo;
import ventanas.VentanaLogIn;

/**
 *
 * @author SANTIAGO
 */
public class VentanaCajero extends javax.swing.JFrame {

    /**
     * Creates new form VentanaCajero
     */
    VentanaLogIn ventanaLogIn;
    DefaultTableModel modeloRutasDisponibles;

    public VentanaCajero(VentanaLogIn ventanaLogIn) {
        initComponents();
        setLocationRelativeTo(this);
        this.ventanaLogIn = ventanaLogIn;
        validarDecisionAdmin();
        declararColumnasTablaRutasDisponibles();
        llenarTablaRutasDisponibles();
    }

    public static String obtenerFechaActual() {
        Date fecha = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/YYYY");
        return formato.format(fecha);
    }

    public static String obtenerHoraActual() {
        Date horaActual = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("HH:mm:ss");
        return formato.format(horaActual);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txtId = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRutasDisponibles = new javax.swing.JTable();
        btnVender = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 0, 150));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cajero", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Busca el pasajero", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        txtId.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtId.setText("Identificaci√≥n");
        txtId.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtIdMouseClicked(evt);
            }
        });
        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });
        txtId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIdKeyTyped(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/btnBuscar.png"))); // NOI18N
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Identificacion");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(38, 38, 38))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        tblRutasDisponibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblRutasDisponibles);

        btnVender.setText("Vender tiquete");
        btnVender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVenderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnVender)
                        .addGap(49, 49, 49))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnVender))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Vender tiquete", jPanel4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 580, 360));

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/btnCerrarSesion.png"))); // NOI18N
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 390, 100, 30));

        btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/btnVolver.png"))); // NOI18N
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        getContentPane().add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 390, 110, 30));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Bus2.png"))); // NOI18N
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        dispose();
        ventanaLogIn.setVisible(true);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        dispose();
        ventanas.VentanaAdministrador ventana = new VentanaAdministrador(ventanaLogIn);
        ventana.setVisible(true);
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        try {
            if (txtId.getText().isEmpty() || txtId.getText().equals("Identificaci√≥n")) {
                throw new CampoIdVacioException();
            }
            String id = txtId.getText();
            Usuario usuario = ventanaLogIn.controladorUsuario.buscarUsuarioIdentificacion(id);
            

            if (usuario instanceof Pasajero && usuario != null) {
           
                boolean siNo = validarSiTieneReservaONo(usuario);
                if (siNo) {
                     Vehiculo vehiculo = ventanaLogIn.controladorBus.buscarVehiculo(((Pasajero) usuario).getReserva().getVehiculo().getPlaca());
                    int decision = JOptionPane.showConfirmDialog(null, "El pasajero tiene una reserva, ¬ødesea pagarla?");
                    if (decision == 0) {
                        ventanaLogIn.controladorUsuario.a√±adirTiqueteVendido(ventanaLogIn.usuarioLogeado);
                        String horaActual = obtenerHoraActual();
                        String fechaActual = obtenerFechaActual();
                        Tiquete tiquete = new Tiquete(((Pasajero) usuario).getReserva().getVehiculo(),
                                ((Pasajero) usuario).getReserva(), horaActual, fechaActual);
                        ventanaLogIn.controladorUsuario.a√±adirTiqueteAlHistorial(usuario.getIdentificacion(), tiquete);
                        ventanaLogIn.controladorBus.disminuirCantidadReserva(vehiculo);
                        mostrarInfoTiquete(tiquete);
                        ventanaLogIn.controladorUsuario.eliminarReservaUsuario(id);
                        JOptionPane.showMessageDialog(null, "Se completo la venta de la reserva");
                    } else {
                        JOptionPane.showMessageDialog(null, "El usuario no prodra comprar tiquetes si no paga la reserva");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El usuario no tiene ninguna reserva");
                }

            } else {
                int decision = JOptionPane.showConfirmDialog(null, "El pasajero no esta registrado, ¬øquieres hacer el debido proceso?\n"
                        + "o el mismo pasajero lo puede hacer");
                if (decision == 0) {
                    this.dispose();
                    VentanaRegistro ventana = new VentanaRegistro(ventanaLogIn);
                    ventana.setVisible(true);
                }
            }
        } catch (CampoIdVacioException | ObjetoTablaNoSeleccionadoException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void txtIdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtIdMouseClicked
        // TODO add your handling code here:
        txtId.setText(null);
    }//GEN-LAST:event_txtIdMouseClicked

    private void txtIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < '0' || c > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_txtIdKeyTyped

    private void btnVenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVenderActionPerformed
        // TODO add your handling code here:
        try {
            int seleccion = tblRutasDisponibles.getSelectedRow();
            if (seleccion < 0) {
                throw new ObjetoTablaNoSeleccionadoException();
            }
            String horaActual = obtenerHoraActual();
            String fechaActual = obtenerFechaActual();
            String numRuta = String.valueOf(modeloRutasDisponibles.getValueAt(seleccion, 0));
            String idPasajero = txtId.getText();
            Usuario usuario = ventanaLogIn.controladorUsuario.buscarUsuarioIdentificacion(idPasajero);
            Ruta ruta = ventanaLogIn.controladorRuta.buscarRuta(numRuta);
            Vehiculo vehiculo = ventanaLogIn.controladorBus.buscarVehiculo(ruta.getVehiculo().getPlaca());

            if (vehiculo.obtenerEstaciosDisponibles() == 0) {
                throw new AsientoVehiculoCompletoException();
            }

            if (usuario instanceof Pasajero) {
                if (((Pasajero) usuario).getReserva() == null) {
                    Tiquete tiquete = new Tiquete(ruta.getVehiculo(), ruta, horaActual, fechaActual);
                    ventanaLogIn.controladorUsuario.a√±adirTiqueteVendido(ventanaLogIn.usuarioLogeado);
                    ventanaLogIn.controladorBus.a√±adirPersonaAlAsiento(usuario, ruta.getVehiculo());
                    ventanaLogIn.controladorUsuario.a√±adirTiqueteAlHistorial(idPasajero, tiquete);
                    actualizarAsientosDisponibles(vehiculo);
                    mostrarInfoTiquete(tiquete);
                } else {
                    JOptionPane.showMessageDialog(null, "El pasajero tiene una reserva, y no podra\ncomprar tiquetes si no completa la compra de esta");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El pasajero no esta esta registrado");
            }
        } catch (ObjetoTablaNoSeleccionadoException | AsientoVehiculoCompletoException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }

    }//GEN-LAST:event_btnVenderActionPerformed

    private void declararColumnasTablaRutasDisponibles() {
        modeloRutasDisponibles = new DefaultTableModel();
        modeloRutasDisponibles.addColumn("Num.Ruta");
        modeloRutasDisponibles.addColumn("Origen");
        modeloRutasDisponibles.addColumn("Destino");
        modeloRutasDisponibles.addColumn("Vehiculo");
        modeloRutasDisponibles.addColumn("As.disponibles");
        modeloRutasDisponibles.addColumn("Precio");
        this.tblRutasDisponibles.setModel(modeloRutasDisponibles);
    }

    private void llenarTablaRutasDisponibles() {
        for (int i = 0; i < ventanaLogIn.controladorRuta.obtenerTama√±oLista(); i++) {
            Ruta ruta = ventanaLogIn.controladorRuta.recorrerLista(i);
            Vehiculo vehiculo = ventanaLogIn.controladorBus.buscarVehiculo(ruta.getVehiculo().getPlaca());
//            if (ruta.isEstado() == false) {
            String[] datos = new String[6];
            datos[0] = ruta.getNumeroRuta();
            datos[1] = ruta.getCiudadOrigen();
            datos[2] = ruta.getCiudadDestino();
            datos[3] = vehiculo.getPlaca();
            datos[4] = String.valueOf(vehiculo.obtenerEstaciosDisponibles());
            datos[5] = "$" + ruta.getPrecio();
            modeloRutasDisponibles.addRow(datos);
//            }
        }
    }

    private void mostrarInfoTiquete(Tiquete tiquete) {
        JOptionPane.showMessageDialog(null, "El tiquete se ha comprado con exito"
                + "\n\nFecha: " + tiquete.getFecha() + "\nHora: " + tiquete.getHora()
                + "\n\nVEHICULO:" + "\nTipo: " + tiquete.getVehiculo().getTipo()
                + "\nPlaca: " + tiquete.getVehiculo().getPlaca()
                + "\n\nRUTA:" + "\nCiudad origen: " + tiquete.getRuta().getCiudadOrigen()
                + "\nCiudad destino: " + tiquete.getRuta().getCiudadDestino()
                + "\n\nPrecio tiquete: $" + tiquete.getRuta().getPrecio());
    }

    private void actualizarAsientosDisponibles(Vehiculo vehiculo) {
        for (int i = 0; i < modeloRutasDisponibles.getRowCount(); i++) {
            if (modeloRutasDisponibles.getValueAt(i, 3).equals(vehiculo.getPlaca())) {
                modeloRutasDisponibles.setValueAt(vehiculo.obtenerEstaciosDisponibles(), i, 4);
            }
        }
    }

    private void validarDecisionAdmin() {
        if (VentanaAdministrador.decision.equals("Tomar rol")) {
            btnVolver.setEnabled(true);
            VentanaAdministrador.decision = "";
        } else {
            btnVolver.setEnabled(false);
        }
    }

    private boolean validarSiTieneReservaONo(Usuario usuario) {
        boolean siNo = false;
        if (((Pasajero) usuario).getReserva() != null) {
            siNo = true;
        }
        return siNo;
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(VentanaCajero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(VentanaCajero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(VentanaCajero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(VentanaCajero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new VentanaCajero().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnVender;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel fondo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable tblRutasDisponibles;
    private javax.swing.JTextField txtId;
    // End of variables declaration//GEN-END:variables
}
